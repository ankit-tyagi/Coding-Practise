//intersection-of-linked-lists


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
int getcount(ListNode* head)
{
    ListNode* current = head;
    int count= 0;
    while(current!=NULL)
    {
        count++;
        current = current->next;
    }
    return count;
}

 
ListNode* getIntersectingNode(ListNode* head1, ListNode* head2, int d)
{
    int i=0;
    ListNode* current1 = head1;
    ListNode* current2 = head2;

    for(i=0;i<d;i++)
    {
        if(current1 == NULL)
            return NULL;
        current1 = current1->next;
    }

    while(current1 != NULL && current2 != NULL)
    {
        if(current1 == current2)
            return current1;
        current1 = current1->next;
        current2 = current2->next;
    }
    return NULL;
}
 
ListNode* Solution::getIntersectionNode(ListNode* A, ListNode* B) {
    int c1 = getcount(A);
    int c2 = getcount(B);
    
    int d;
    if(c1>c2)
    {
        d= c1-c2;
        return getIntersectingNode(A, B, d);
    }
    else
    {
        d=c2-c1;
        return getIntersectingNode(B, A, d);
    }
    
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
}


